{"/home/travis/build/npmtest/node-npmtest-node-couchdb/test.js":"/* istanbul instrument in package npmtest_node_couchdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-couchdb/lib.npmtest_node_couchdb.js":"/* istanbul instrument in package npmtest_node_couchdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_couchdb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_couchdb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-couchdb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-couchdb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_couchdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_couchdb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_couchdb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_couchdb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_couchdb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_couchdb.__dirname + '/lib.npmtest_node_couchdb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-couchdb/node_modules/node-couchdb/dist/es2015.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _request = require('request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @see https://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n// @see https://github.com/1999/node-couchdb/issues/9\nconst KEYS_TO_ENCODE = ['key', 'keys', 'startkey', 'endkey'];\n\nclass RequestError extends Error {\n    constructor(code, message, body) {\n        super(message);\n\n        this.code = code;\n        this.body = body;\n    }\n}\n\nclass NodeCouchDB {\n    constructor() {\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        const instanceOpts = Object.assign({\n            protocol: 'http',\n            host: '127.0.0.1',\n            port: 5984,\n            cache: null,\n            timeout: 5000,\n            auth: null\n        }, opts);\n\n        this._baseUrl = `${instanceOpts.protocol}://${instanceOpts.host}:${instanceOpts.port}`;\n        this._cache = instanceOpts.cache;\n\n        this._requestWrappedDefaults = _request2.default.defaults({\n            auth: instanceOpts.auth,\n            headers: {\n                'user-agent': 'node-couchdb/1'\n            },\n            json: true,\n            timeout: instanceOpts.timeout\n        });\n    }\n\n    /**\n     * Use new cache mechanism (an \"invalidate\" method of the old cache machanism will be invoked)\n     * This method is useful if you want to call GC manually\n     *\n     * @param {Object} cacheObj\n     * @return {Undefined}\n     */\n    useCache(cache) {\n        try {\n            this._cache.invalidate();\n        } catch (e) {}\n\n        this._cache = cache;\n    }\n\n    /**\n     * Get the list of all databases. Returns a promise which is\n     * - resolved with {Array} list of databases\n     * - rejected with `request` original error\n     *\n     * @return {Promise}\n     */\n    listDatabases() {\n        return this._requestWrapped(`${this._baseUrl}/_all_dbs`).then((_ref) => {\n            let body = _ref.body;\n            return body;\n        });\n    }\n\n    /**\n     * Creates a database. Returns a promise which is\n     * - resolved with no arguments\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName\n     * @return {Promise}\n     */\n    createDatabase(dbName) {\n        return this._requestWrapped({\n            method: 'PUT',\n            url: `${this._baseUrl}/${dbName}`\n        }).then((_ref2) => {\n            let res = _ref2.res,\n                body = _ref2.body;\n\n            // database already exists\n            if (res.statusCode === 412) {\n                throw new RequestError('EDBEXISTS', `Database already exists: ${dbName}`, body);\n            }\n\n            if (res.statusCode === 401) {\n                throw new RequestError('ENOTADMIN', `Should be authorized as admin to create database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode === 400) {\n                throw new RequestError('EBADREQUEST', res.body.reason, body);\n            }\n\n            if (res.statusCode !== 201) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while creating database ${dbName}: ${res.statusCode}`, body);\n            }\n        });\n    }\n\n    /**\n     * Drops database by its name. Returns a promise which is\n     * - resolved with no arguments\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName\n     * @return {Promise}\n     */\n    dropDatabase(dbName) {\n        return this._requestWrapped({\n            method: 'DELETE',\n            url: `${this._baseUrl}/${dbName}/`\n        }).then((_ref3) => {\n            let res = _ref3.res,\n                body = _ref3.body;\n\n            // database not found\n            if (res.statusCode === 404) {\n                throw new RequestError('EDBMISSING', `Database not found: ${dbName}`, body);\n            }\n\n            if (res.statusCode === 401) {\n                throw new RequestError('ENOTADMIN', `Should be authorized as admin to delete database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode !== 200) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while deleting database ${dbName}: ${res.statusCode}`, body);\n            }\n        });\n    }\n\n    /**\n     * Fetch data from CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {String} uri document ID or design view\n     * @param {Object} [query] query options as key: value\n     * @return {Promise}\n     */\n    get(dbName, uri) {\n        let query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        for (let prop in query) {\n            if (KEYS_TO_ENCODE.indexOf(prop) !== -1) {\n                query[prop] = JSON.stringify(query[prop]);\n            }\n        }\n\n        const requestOpts = {\n            url: `${this._baseUrl}/${dbName}/${uri}`,\n            qs: query\n        };\n\n        return this._requestWrapped(requestOpts).then((_ref4) => {\n            let res = _ref4.res,\n                body = _ref4.body;\n\n            if (res.statusCode === 404) {\n                throw new RequestError('EDOCMISSING', 'Document is not found', body);\n            }\n\n            if (res.statusCode !== 200 && res.statusCode !== 304) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while fetching documents from the database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode === 200 && this._cache) {\n                const cacheKey = this._getCacheKey(requestOpts);\n\n                this._cache.set(cacheKey, {\n                    body,\n                    etag: res.headers.etag\n                });\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Insert document into CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {Object} data\n     * @return {Promise}\n     */\n    insert(dbName, data) {\n        return this._requestWrapped({\n            method: 'POST',\n            url: `${this._baseUrl}/${dbName}`,\n            body: data\n        }).then((_ref5) => {\n            let res = _ref5.res,\n                body = _ref5.body;\n\n            this._checkDocumentManipulationStatus(res.statusCode, body);\n\n            if (res.statusCode !== 201 && res.statusCode !== 202) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while inserting document into the database: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Update a document in CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {Object} data should contain both \"_id\" and \"_rev\" fields\n     * @return {Promise}\n     */\n    update(dbName, data) {\n        if (!data._id || !data._rev) {\n            const err = new Error('Both _id and _rev fields should exist when updating the document');\n            err.code = 'EFIELDMISSING';\n\n            return Promise.reject(err);\n        }\n\n        return this._requestWrapped({\n            method: 'PUT',\n            url: `${this._baseUrl}/${dbName}/${encodeURIComponent(data._id)}`,\n            body: data\n        }).then((_ref6) => {\n            let res = _ref6.res,\n                body = _ref6.body;\n\n            this._checkDocumentManipulationStatus(res.statusCode, body);\n\n            if (res.statusCode !== 201 && res.statusCode !== 202) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while inserting document into the database: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Delete a document in the database. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {String} docId document id\n     * @param {String} docRevision document revision\n     * @return {Promise}\n     */\n    del(dbName, docId, docRevision) {\n        return this._requestWrapped({\n            method: 'DELETE',\n            url: `${this._baseUrl}/${dbName}/${encodeURIComponent(docId)}`,\n            qs: {\n                rev: docRevision\n            }\n        }).then((_ref7) => {\n            let res = _ref7.res,\n                body = _ref7.body;\n\n            this._checkDocumentManipulationStatus(res.statusCode, body);\n\n            if (res.statusCode !== 200) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while deleting document: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Get UUIDs for new documents. Returns a promise which is\n     * - resolved with array of new unique ids\n     * - rejected with `request` original error\n     *\n     * @param {Number} [count = 1] number of IDs you want to get\n     * @return {Promise}\n     */\n    uniqid() {\n        let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        return this._requestWrapped({\n            url: `${this._baseUrl}/_uuids`,\n            qs: { count }\n        }).then((_ref8) => {\n            let body = _ref8.body;\n\n            return body.uuids;\n        });\n    }\n\n    /**\n     * Check the status code of a documentation manipulation like INSERT, UPDATE, DELETE\n     *\n     * @param {Number} statusCode\n     * @param {Object} body\n     * @throws {RequestError}\n     */\n    _checkDocumentManipulationStatus(statusCode, body) {\n        if (statusCode === 400) {\n            throw new RequestError('EBADREQUEST', 'Invalid request body or parameters', body);\n        }\n\n        if (statusCode === 401) {\n            throw new RequestError('EUNAUTHORIZED', 'Write privileges required', body);\n        }\n\n        if (statusCode === 404) {\n            throw new RequestError('EDOCMISSING', 'Document not found', body);\n        }\n\n        if (statusCode === 409) {\n            throw new RequestError('EDOCCONFLICT', 'Document insert conflict', body);\n        }\n    }\n\n    /**\n     * Requests wrapper. Checks for cache first for GET requests.\n     * Should be invoked with arguments suitable for `request`\n     *\n     * @return {Promise}\n     */\n    _requestWrapped(opts) {\n        if (typeof opts === 'string') {\n            opts = { url: opts };\n        }\n\n        const cacheKey = this._getCacheKey(opts);\n        const whenCacheChecked = !this._cache || opts.method && opts.method !== 'GET' ? Promise.resolve({}) : this._cache.get(cacheKey);\n\n        return whenCacheChecked.then(cache => {\n            // cache plugin returns null if record doesn't exist\n            var _ref9 = cache || {};\n\n            const etag = _ref9.etag,\n                  cacheBody = _ref9.body;\n\n\n            return new Promise((resolve, reject) => {\n                if (etag) {\n                    opts.headers = opts.headers || {};\n                    opts.headers['if-none-match'] = etag;\n                }\n\n                this._requestWrappedDefaults(opts, (err, res, body) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve({\n                            res,\n                            body: body || cacheBody\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * Gets cache key built from request options\n     *\n     * @param {Object} requestOpts\n     * @return {String}\n     */\n    _getCacheKey(requestOpts) {\n        const stringifiedQuery = JSON.stringify(requestOpts.query || {});\n        const cacheKeyFull = `${requestOpts.url}?${stringifiedQuery}`;\n\n        return _crypto2.default.createHash('md5').update(cacheKeyFull).digest('hex');\n    }\n}exports.default = NodeCouchDB;\n;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-node-couchdb/node_modules/node-couchdb/lib/node-couchdb.js":"'use strict';\n\nimport crypto from 'crypto';\nimport request from 'request';\n\n// @see https://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n// @see https://github.com/1999/node-couchdb/issues/9\nconst KEYS_TO_ENCODE = ['key', 'keys', 'startkey', 'endkey'];\n\nclass RequestError extends Error {\n    constructor(code, message, body) {\n        super(message);\n\n        this.code = code;\n        this.body = body;\n    }\n}\n\nexport default class NodeCouchDB {\n    constructor(opts = {}) {\n        const instanceOpts = Object.assign({\n            protocol: 'http',\n            host: '127.0.0.1',\n            port: 5984,\n            cache: null,\n            timeout: 5000,\n            auth: null\n        }, opts);\n\n        this._baseUrl = `${instanceOpts.protocol}://${instanceOpts.host}:${instanceOpts.port}`;\n        this._cache = instanceOpts.cache;\n\n        this._requestWrappedDefaults = request.defaults({\n            auth: instanceOpts.auth,\n            headers: {\n                'user-agent': 'node-couchdb/1'\n            },\n            json: true,\n            timeout: instanceOpts.timeout\n        });\n    }\n\n    /**\n     * Use new cache mechanism (an \"invalidate\" method of the old cache machanism will be invoked)\n     * This method is useful if you want to call GC manually\n     *\n     * @param {Object} cacheObj\n     * @return {Undefined}\n     */\n    useCache(cache) {\n        try {\n            this._cache.invalidate();\n        } catch (e) {}\n\n        this._cache = cache;\n    }\n\n    /**\n     * Get the list of all databases. Returns a promise which is\n     * - resolved with {Array} list of databases\n     * - rejected with `request` original error\n     *\n     * @return {Promise}\n     */\n    listDatabases() {\n        return this._requestWrapped(`${this._baseUrl}/_all_dbs`).then(({body}) => body);\n    }\n\n    /**\n     * Creates a database. Returns a promise which is\n     * - resolved with no arguments\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName\n     * @return {Promise}\n     */\n    createDatabase(dbName) {\n        return this._requestWrapped({\n            method: 'PUT',\n            url: `${this._baseUrl}/${dbName}`\n        }).then(({res, body}) => {\n            // database already exists\n            if (res.statusCode === 412) {\n                throw new RequestError('EDBEXISTS', `Database already exists: ${dbName}`, body);\n            }\n\n            if (res.statusCode === 401) {\n                throw new RequestError('ENOTADMIN', `Should be authorized as admin to create database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode === 400) {\n                throw new RequestError('EBADREQUEST', res.body.reason, body);\n            }\n\n            if (res.statusCode !== 201) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while creating database ${dbName}: ${res.statusCode}`, body);\n            }\n        });\n    }\n\n    /**\n     * Drops database by its name. Returns a promise which is\n     * - resolved with no arguments\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName\n     * @return {Promise}\n     */\n    dropDatabase(dbName) {\n        return this._requestWrapped({\n            method: 'DELETE',\n            url: `${this._baseUrl}/${dbName}/`\n        }).then(({res, body}) => {\n            // database not found\n            if (res.statusCode === 404) {\n                throw new RequestError('EDBMISSING', `Database not found: ${dbName}`, body);\n            }\n\n            if (res.statusCode === 401) {\n                throw new RequestError('ENOTADMIN', `Should be authorized as admin to delete database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode !== 200) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while deleting database ${dbName}: ${res.statusCode}`, body);\n            }\n        });\n    }\n\n    /**\n     * Fetch data from CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {String} uri document ID or design view\n     * @param {Object} [query] query options as key: value\n     * @return {Promise}\n     */\n    get(dbName, uri, query = {}) {\n        for (let prop in query) {\n            if (KEYS_TO_ENCODE.includes(prop)) {\n                query[prop] = JSON.stringify(query[prop]);\n            }\n        }\n\n        const requestOpts = {\n            url: `${this._baseUrl}/${dbName}/${uri}`,\n            qs: query\n        };\n\n        return this._requestWrapped(requestOpts).then(({res, body}) => {\n            if (res.statusCode === 404) {\n                throw new RequestError('EDOCMISSING', 'Document is not found', body);\n            }\n\n            if (res.statusCode !== 200 && res.statusCode !== 304) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while fetching documents from the database: ${res.statusCode}`, body);\n            }\n\n            if (res.statusCode === 200 && this._cache) {\n                const cacheKey = this._getCacheKey(requestOpts);\n\n                this._cache.set(cacheKey, {\n                    body,\n                    etag: res.headers.etag\n                });\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Insert document into CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {Object} data\n     * @return {Promise}\n     */\n    insert(dbName, data) {\n        return this._requestWrapped({\n            method: 'POST',\n            url: `${this._baseUrl}/${dbName}`,\n            body: data\n        }).then(({res, body}) => {\n            this._checkDocumentManipulationStatus(res.statusCode, body)\n\n            if (res.statusCode !== 201 && res.statusCode !== 202) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while inserting document into the database: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Update a document in CouchDB. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {Object} data should contain both \"_id\" and \"_rev\" fields\n     * @return {Promise}\n     */\n    update(dbName, data) {\n        if (!data._id || !data._rev) {\n            const err = new Error('Both _id and _rev fields should exist when updating the document');\n            err.code = 'EFIELDMISSING';\n\n            return Promise.reject(err);\n        }\n\n        return this._requestWrapped({\n            method: 'PUT',\n            url: `${this._baseUrl}/${dbName}/${encodeURIComponent(data._id)}`,\n            body: data\n        }).then(({res, body}) => {\n            this._checkDocumentManipulationStatus(res.statusCode, body)\n\n\n            if (res.statusCode !== 201 && res.statusCode !== 202) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while inserting document into the database: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Delete a document in the database. Returns a promise which is\n     * - resolved with {data, headers, status} object\n     * - rejected with `request` original error\n     *\n     * @param {String} dbName database name\n     * @param {String} docId document id\n     * @param {String} docRevision document revision\n     * @return {Promise}\n     */\n    del(dbName, docId, docRevision) {\n        return this._requestWrapped({\n            method: 'DELETE',\n            url: `${this._baseUrl}/${dbName}/${encodeURIComponent(docId)}`,\n            qs: {\n                rev: docRevision\n            }\n        }).then(({res, body}) => {\n            this._checkDocumentManipulationStatus(res.statusCode, body)\n\n            if (res.statusCode !== 200) {\n                throw new RequestError('EUNKNOWN', `Unexpected status code while deleting document: ${res.statusCode}`, body);\n            }\n\n            return {\n                data: body,\n                headers: res.headers,\n                status: res.statusCode\n            };\n        });\n    }\n\n    /**\n     * Get UUIDs for new documents. Returns a promise which is\n     * - resolved with array of new unique ids\n     * - rejected with `request` original error\n     *\n     * @param {Number} [count = 1] number of IDs you want to get\n     * @return {Promise}\n     */\n    uniqid(count = 1) {\n        return this._requestWrapped({\n            url: `${this._baseUrl}/_uuids`,\n            qs: {count}\n        }).then(({body}) => {\n            return body.uuids;\n        });\n    }\n\n    /**\n     * Check the status code of a documentation manipulation like INSERT, UPDATE, DELETE\n     *\n     * @param {Number} statusCode\n     * @param {Object} body\n     * @throws {RequestError}\n     */\n    _checkDocumentManipulationStatus(statusCode, body) {\n      if (statusCode === 400) {\n          throw new RequestError('EBADREQUEST', 'Invalid request body or parameters', body);\n      }\n\n      if (statusCode === 401) {\n          throw new RequestError('EUNAUTHORIZED', 'Write privileges required', body);\n      }\n\n      if (statusCode === 404) {\n          throw new RequestError('EDOCMISSING', 'Document not found', body);\n      }\n\n      if (statusCode === 409) {\n          throw new RequestError('EDOCCONFLICT', 'Document insert conflict', body);\n      }\n    }\n\n    /**\n     * Requests wrapper. Checks for cache first for GET requests.\n     * Should be invoked with arguments suitable for `request`\n     *\n     * @return {Promise}\n     */\n    _requestWrapped(opts) {\n        if (typeof opts === 'string') {\n            opts = {url: opts};\n        }\n\n        const cacheKey = this._getCacheKey(opts);\n        const whenCacheChecked = (!this._cache || (opts.method && opts.method !== 'GET'))\n            ? Promise.resolve({})\n            : this._cache.get(cacheKey);\n\n        return whenCacheChecked.then(cache => {\n            // cache plugin returns null if record doesn't exist\n            const {\n                etag,\n                body: cacheBody\n            } = cache || {};\n\n            return new Promise((resolve, reject) => {\n                if (etag) {\n                    opts.headers = opts.headers || {};\n                    opts.headers['if-none-match'] = etag;\n                }\n\n                this._requestWrappedDefaults(opts, (err, res, body) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve({\n                            res,\n                            body: body || cacheBody\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n\n    /**\n     * Gets cache key built from request options\n     *\n     * @param {Object} requestOpts\n     * @return {String}\n     */\n    _getCacheKey(requestOpts) {\n        const stringifiedQuery = JSON.stringify(requestOpts.query || {});\n        const cacheKeyFull = `${requestOpts.url}?${stringifiedQuery}`;\n\n        return crypto.createHash('md5').update(cacheKeyFull).digest('hex');\n    }\n};\n"}